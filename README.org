#+title: turing-machine

* Description

Turing machine simulator.

* Turing Machines

** TODO What is a Turing Machine?

** Defining a Turing Machine

A Turing machine is defined by its...

- Input alphabet: Σ
- Tape alphabet: Γ
- Set of states: Q
- Transition table: δ: Q x Γ x -> Q x Γ x {L, R, S}

Where {L, R, S} (left, right, stay) represents the direction which the head
should move along the tape.

** Turing Machine Computations

*** Configurations

Turing machine computations can be viewed as a sequence of configurations, where
a configuration is a snapshot of the Turing machine's state, head position, and
tape content.

*** Programs

Turing machine programs are defined by a transition table. Inputs to the program
are written on a tape, the tape is fed into the Turing machine, and the
transition table determines the sequence of configurations which compose the
computation.

* Instructions

** Installation

Building with =make=:
#+begin_src sh
make
#+end_src

Building without =make=:
#+begin_src sh
csc -o turing-machine -include-path src src/cli.scm
#+end_src

** Writing Programs

=turing-machine= programs are written in text files, where each line of the text
file is used to specify a transition rule in the following format:

#+begin_src text
CURRENT_STATE READ_SYMBOL -> NEXT_STATE WRITE_SYMBOL MOVE_DIRECTION
#+end_src

- ~CURRENT_STATE~: Character representing the current state
- ~READ_SYMBOL~: Character read from the tape
- ~NEXT_STATE~: Character representing the next state
- ~WRITE_SYMBOL~: Character to write on the tape
- ~MOVE_DIRECTION~: Character representing the direction to move the head

The initial state is always represented by the ~0~ character, ~A~ and ~R~ are
used to represent the accept and reject states, which are the only states in
which the Turing machine will halt, ~_~ is used to represent blank read/write
symbols, and move directions are specified using ~L~, ~R~, and ~S~ (left, right,
stay).

** Running Programs

To run a Turing machine program, pass the name of the text file containing the
transition table of the program as a command-line argument to =turing-machine=.

i.e. ~./turing-machine res/example-program.txt~

This will start the =turing-machine= REPL, which does the following in a loop:
- Reads a tape from input
- Evaluates the program using the tape, that is, it evaluates transition rules
  until the machine has reached one of the halt states
- Outputs the resulting halt state and tape

* Dependencies

- Chicken Scheme

* License

Copyright (C) 2021 Robert Coffey

This is free software: you can redistribute it and/or modify it under the terms
of the GNU General Public License version 3 as published by the Free Software
Foundation.

You should have received a copy of the GNU General Public License version 3
along with this software. If not, see [[https://www.gnu.org/licenses/gpl-3.0][GPLv3]].
